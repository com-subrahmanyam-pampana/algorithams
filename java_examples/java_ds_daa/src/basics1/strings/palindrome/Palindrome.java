package basics1.strings.palindrome;

import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;

public class Palindrome {

	// Recursive function to check if `str[lowâ€¦high]` is a palindrome or not
	public static boolean isPalindrome(String str, int low, int high) {
		return (low >= high) || (str.charAt(low) == str.charAt(high) && isPalindrome(str, low + 1, high - 1));
	}

	static boolean isPalindrome(String str) {
		// Start from leftmost and rightmost corners of str
		int l = 0;
		int h = str.length() - 1;

		// Keep comparing characters while they are same
		while (h > l)
			if (str.charAt(l++) != str.charAt(h--))
				return false;

		// If we reach here, then all characters were matching
		return true;
	}

	// Function to check if a given string is a rotated palindrome or not
	public static boolean isRotatedPalindrome(String str) {
		// length of the given string
		int n = str.length();

		// check for all rotations of the given string if it
		// is palindrome or not
		for (int i = 0; i < n; i++) {
			// in-place rotate the string by 1 unit
			str = str.substring(1) + str.charAt(0);

			// return true if the rotation is a palindrome
			if (isPalindrome(str, 0, n - 1)) {
				return true;
			}
		}

		// return false if no rotation is a palindrome
		return false;
	}

	static boolean isRotationOfPalindrome(String str) {
		// If string iteself is palindrome
		if (isPalindrome(str))
			return true;

		// Now try all rotations one by one
		int n = str.length();
		for (int i = 0; i < n - 1; i++) {
			String str1 = str.substring(i + 1);
			System.out.println(str1);
			String str2 = str.substring(0, i + 1);
			System.out.println(str2);

			// Check if this rotation is palindrome
			if (isPalindrome(str1 + str2))
				return true;
		}
		return false;
	}
	
	
	

	/**
	 * In this method equality is checked starting from the center moving one
	 * character left and one character right from the center. If both chars are
	 * equal then the next set of chars are checked.
	 * 
	 */
	public static String checkForEquality(String s, int begin, int end) {
		while (begin >= 0 && end <= s.length() - 1 && s.charAt(begin) == s.charAt(end)) {
			begin--;
			end++;
		}
		return s.substring(begin + 1, end);
	}

	/*
	 * Function to print all possible palindromic partitions of str. It mainly
	 * creates vectors and calls allPalPartUtil()
	 */
	private static void allPalPartitions(String input) {
		int n = input.length();

		// To Store all palindromic partitions
		ArrayList<ArrayList<String>> allPart = new ArrayList<>();

		// To store current palindromic partition
		Deque<String> currPart = new LinkedList<String>();

		// Call recursive function to generate
		// all partitions and store in allPart
		allPalPartitonsUtil(allPart, currPart, 0, n, input);

		// Print all partitions generated by above call
		for (int i = 0; i < allPart.size(); i++) {
			for (int j = 0; j < allPart.get(i).size(); j++) {
				System.out.print(allPart.get(i).get(j) + " ");
			}
			System.out.println();
		}

	}

	/*
	 * Recursive function to find all palindromic partitions of input[start..n-1]
	 * allPart --> A ArrayList of Deque of strings. Every Deque inside it stores a
	 * partition currPart --> A Deque of strings to store current partition
	 */
	private static void allPalPartitonsUtil(ArrayList<ArrayList<String>> allPart, Deque<String> currPart, int start,
			int n, String input) {
		// If 'start' has reached len
		if (start >= n) {
			allPart.add(new ArrayList<>(currPart));
			return;
		}

		// Pick all possible ending points for substrings
		for (int i = start; i < n; i++) {

			// If substring str[start..i] is palindrome
			if (isPalindrome(input, start, i)) {

				// Add the substring to result
				currPart.addLast(input.substring(start, i + 1));

				// Recur for remaining remaining substring
				allPalPartitonsUtil(allPart, currPart, i + 1, n, input);

				// Remove substring str[start..i] from current
				// partition
				currPart.removeLast();
			}
		}
	}

	public static void printAllPaPartations2(String input, String output, int begin, int end) {
		if (begin == end) {
			System.out.println(output);
			return;
		}
		int n = input.length();
		String delimiter = "-";
		for (int i = begin; i < end; i++) {
			if (isPalindrome(input, begin, i)) {
				if (i + 1 == n) {
					delimiter = "";
				}
				printAllPaPartations2(input, output + input.substring(begin, i + 1) + delimiter, i + 1, end);
			}
		}
	}

	public static void allPaPartations2() {
		String input = "abcb";
		String output = "";
		int begin = 0;
		int end = input.length();
		printAllPaPartations2(input, output, begin, end);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// System.out.println((isRotationOfPalindrome("abcde")) ? 1 : 0);

		// System.out.println((isRotationOfPalindrome("aab")) ? 1 : 0);

		//String equaity = checkForEquality("cavac", 2, 2);
		//System.out.println(equaity);
		
		allPaPartations2();

	}

}
